|part3
SW[0] => Divisor[0].IN2
SW[1] => Divisor[1].IN2
SW[2] => Divisor[2].IN2
SW[3] => Divisor[3].IN2
SW[4] => Dividend[0].IN2
SW[5] => Dividend[1].IN2
SW[6] => Dividend[2].IN2
SW[7] => Dividend[3].IN2
KEY[0] => resetn.IN1
KEY[1] => go.IN1
CLOCK_50 => CLOCK_50.IN1
LEDR[0] <= quotient[0].DB_MAX_OUTPUT_PORT_TYPE
LEDR[1] <= quotient[1].DB_MAX_OUTPUT_PORT_TYPE
LEDR[2] <= quotient[2].DB_MAX_OUTPUT_PORT_TYPE
LEDR[3] <= quotient[3].DB_MAX_OUTPUT_PORT_TYPE
HEX0[0] <= hex_decoder:H0.segments
HEX0[1] <= hex_decoder:H0.segments
HEX0[2] <= hex_decoder:H0.segments
HEX0[3] <= hex_decoder:H0.segments
HEX0[4] <= hex_decoder:H0.segments
HEX0[5] <= hex_decoder:H0.segments
HEX0[6] <= hex_decoder:H0.segments
HEX1[0] <= hex_decoder:H1.segments
HEX1[1] <= hex_decoder:H1.segments
HEX1[2] <= hex_decoder:H1.segments
HEX1[3] <= hex_decoder:H1.segments
HEX1[4] <= hex_decoder:H1.segments
HEX1[5] <= hex_decoder:H1.segments
HEX1[6] <= hex_decoder:H1.segments
HEX2[0] <= hex_decoder:H2.segments
HEX2[1] <= hex_decoder:H2.segments
HEX2[2] <= hex_decoder:H2.segments
HEX2[3] <= hex_decoder:H2.segments
HEX2[4] <= hex_decoder:H2.segments
HEX2[5] <= hex_decoder:H2.segments
HEX2[6] <= hex_decoder:H2.segments
HEX3[0] <= hex_decoder:H3.segments
HEX3[1] <= hex_decoder:H3.segments
HEX3[2] <= hex_decoder:H3.segments
HEX3[3] <= hex_decoder:H3.segments
HEX3[4] <= hex_decoder:H3.segments
HEX3[5] <= hex_decoder:H3.segments
HEX3[6] <= hex_decoder:H3.segments
HEX4[0] <= hex_decoder:H4.segments
HEX4[1] <= hex_decoder:H4.segments
HEX4[2] <= hex_decoder:H4.segments
HEX4[3] <= hex_decoder:H4.segments
HEX4[4] <= hex_decoder:H4.segments
HEX4[5] <= hex_decoder:H4.segments
HEX4[6] <= hex_decoder:H4.segments
HEX5[0] <= hex_decoder:H5.segments
HEX5[1] <= hex_decoder:H5.segments
HEX5[2] <= hex_decoder:H5.segments
HEX5[3] <= hex_decoder:H5.segments
HEX5[4] <= hex_decoder:H5.segments
HEX5[5] <= hex_decoder:H5.segments
HEX5[6] <= hex_decoder:H5.segments


|part3|whereTheMagicHappens:magic0
CLOCK_50 => CLOCK_50.IN2
resetn => resetn.IN2
go => go.IN1
Divisor[0] => Divisor[0].IN1
Divisor[1] => Divisor[1].IN1
Divisor[2] => Divisor[2].IN1
Divisor[3] => Divisor[3].IN1
Dividend[0] => Dividend[0].IN1
Dividend[1] => Dividend[1].IN1
Dividend[2] => Dividend[2].IN1
Dividend[3] => Dividend[3].IN1
A[0] <= datapath:datapath0.A
A[1] <= datapath:datapath0.A
A[2] <= datapath:datapath0.A
A[3] <= datapath:datapath0.A
A[4] <= datapath:datapath0.A
A[5] <= datapath:datapath0.A
A[6] <= datapath:datapath0.A
A[7] <= datapath:datapath0.A
A[8] <= datapath:datapath0.A


|part3|whereTheMagicHappens:magic0|control:control0
CLOCK_50 => current_state~1.DATAIN
resetn => current_state.OUTPUTSELECT
resetn => current_state.OUTPUTSELECT
resetn => current_state.OUTPUTSELECT
resetn => current_state.OUTPUTSELECT
resetn => current_state.OUTPUTSELECT
resetn => current_state.OUTPUTSELECT
resetn => current_state.OUTPUTSELECT
resetn => current_state.OUTPUTSELECT
go => next_state.OUTPUTSELECT
go => next_state.OUTPUTSELECT
go => next_state.OUTPUTSELECT
go => next_state.OUTPUTSELECT
go => next_state.OUTPUTSELECT
go => Selector5.IN2
go => Selector7.IN1
go => Selector9.IN1
go => Selector11.IN1
go => Selector4.IN1
go => Selector6.IN1
go => Selector6.IN2
go => Selector8.IN1
go => Selector10.IN1
go => counter[1].IN1
go => counter[1].IN1
MSB_A => next_state.OUTPUTSELECT
MSB_A => next_state.OUTPUTSELECT
MSB_A => next_state.DATAA
MSB_A => counter[1].IN1
ld_a <= WideOr8.DB_MAX_OUTPUT_PORT_TYPE
ld_r <= ld_r.DB_MAX_OUTPUT_PORT_TYPE
ld_Dividend <= WideOr9.DB_MAX_OUTPUT_PORT_TYPE
ld_Divisor <= ld_r.DB_MAX_OUTPUT_PORT_TYPE
alu_select_a <= alu_select_a.DB_MAX_OUTPUT_PORT_TYPE
alu_op[0] <= alu_op.DB_MAX_OUTPUT_PORT_TYPE
alu_op[1] <= alu_select_a.DB_MAX_OUTPUT_PORT_TYPE
new_A <= WideOr10.DB_MAX_OUTPUT_PORT_TYPE
new_Dividend <= new_Dividend.DB_MAX_OUTPUT_PORT_TYPE


|part3|whereTheMagicHappens:magic0|datapath:datapath0
CLOCK_50 => A[0]~reg0.CLK
CLOCK_50 => A[1]~reg0.CLK
CLOCK_50 => A[2]~reg0.CLK
CLOCK_50 => A[3]~reg0.CLK
CLOCK_50 => A[4]~reg0.CLK
CLOCK_50 => A[5]~reg0.CLK
CLOCK_50 => A[6]~reg0.CLK
CLOCK_50 => A[7]~reg0.CLK
CLOCK_50 => A[8]~reg0.CLK
CLOCK_50 => Divisor_Reg[0].CLK
CLOCK_50 => Divisor_Reg[1].CLK
CLOCK_50 => Divisor_Reg[2].CLK
CLOCK_50 => Divisor_Reg[3].CLK
CLOCK_50 => Dividend_Reg[0].CLK
CLOCK_50 => Dividend_Reg[1].CLK
CLOCK_50 => Dividend_Reg[2].CLK
CLOCK_50 => Dividend_Reg[3].CLK
CLOCK_50 => a_Reg[0].CLK
CLOCK_50 => a_Reg[1].CLK
CLOCK_50 => a_Reg[2].CLK
CLOCK_50 => a_Reg[3].CLK
CLOCK_50 => a_Reg[4].CLK
resetn => a_Reg.OUTPUTSELECT
resetn => a_Reg.OUTPUTSELECT
resetn => a_Reg.OUTPUTSELECT
resetn => a_Reg.OUTPUTSELECT
resetn => a_Reg.OUTPUTSELECT
resetn => Dividend_Reg.OUTPUTSELECT
resetn => Dividend_Reg.OUTPUTSELECT
resetn => Dividend_Reg.OUTPUTSELECT
resetn => Dividend_Reg.OUTPUTSELECT
resetn => Divisor_Reg.OUTPUTSELECT
resetn => Divisor_Reg.OUTPUTSELECT
resetn => Divisor_Reg.OUTPUTSELECT
resetn => Divisor_Reg.OUTPUTSELECT
resetn => A.OUTPUTSELECT
resetn => A.OUTPUTSELECT
resetn => A.OUTPUTSELECT
resetn => A.OUTPUTSELECT
resetn => A.OUTPUTSELECT
resetn => A.OUTPUTSELECT
resetn => A.OUTPUTSELECT
resetn => A.OUTPUTSELECT
resetn => A.OUTPUTSELECT
Divisor[0] => Divisor_Reg.DATAB
Divisor[1] => Divisor_Reg.DATAB
Divisor[2] => Divisor_Reg.DATAB
Divisor[3] => Divisor_Reg.DATAB
Dividend[0] => Dividend_Reg.DATAA
Dividend[1] => Dividend_Reg.DATAA
Dividend[2] => Dividend_Reg.DATAA
Dividend[3] => Dividend_Reg.DATAA
ld_a => a_Reg.OUTPUTSELECT
ld_a => a_Reg.OUTPUTSELECT
ld_a => a_Reg.OUTPUTSELECT
ld_a => a_Reg.OUTPUTSELECT
ld_a => a_Reg.OUTPUTSELECT
ld_r => A.OUTPUTSELECT
ld_r => A.OUTPUTSELECT
ld_r => A.OUTPUTSELECT
ld_r => A.OUTPUTSELECT
ld_r => A.OUTPUTSELECT
ld_r => A.OUTPUTSELECT
ld_r => A.OUTPUTSELECT
ld_r => A.OUTPUTSELECT
ld_r => A.OUTPUTSELECT
ld_Dividend => Dividend_Reg.OUTPUTSELECT
ld_Dividend => Dividend_Reg.OUTPUTSELECT
ld_Dividend => Dividend_Reg.OUTPUTSELECT
ld_Dividend => Dividend_Reg.OUTPUTSELECT
ld_Divisor => Divisor_Reg.OUTPUTSELECT
ld_Divisor => Divisor_Reg.OUTPUTSELECT
ld_Divisor => Divisor_Reg.OUTPUTSELECT
ld_Divisor => Divisor_Reg.OUTPUTSELECT
alu_select_a => Decoder0.IN0
alu_op[0] => Mux0.IN4
alu_op[0] => Mux1.IN2
alu_op[0] => Mux2.IN2
alu_op[0] => Mux3.IN2
alu_op[0] => Mux4.IN4
alu_op[0] => Mux5.IN4
alu_op[0] => Mux6.IN4
alu_op[0] => Mux7.IN4
alu_op[0] => Mux8.IN4
alu_op[0] => Mux9.IN5
alu_op[1] => Mux0.IN3
alu_op[1] => Mux1.IN1
alu_op[1] => Mux2.IN1
alu_op[1] => Mux3.IN1
alu_op[1] => Mux4.IN3
alu_op[1] => Mux5.IN3
alu_op[1] => Mux6.IN3
alu_op[1] => Mux7.IN3
alu_op[1] => Mux8.IN3
alu_op[1] => Mux9.IN4
new_A => a_Reg.OUTPUTSELECT
new_A => a_Reg.OUTPUTSELECT
new_A => a_Reg.OUTPUTSELECT
new_A => a_Reg.OUTPUTSELECT
new_A => a_Reg.OUTPUTSELECT
new_Dividend => Dividend_Reg.OUTPUTSELECT
new_Dividend => Dividend_Reg.OUTPUTSELECT
new_Dividend => Dividend_Reg.OUTPUTSELECT
new_Dividend => Dividend_Reg.OUTPUTSELECT
A[0] <= A[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
A[1] <= A[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
A[2] <= A[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
A[3] <= A[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
A[4] <= A[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
A[5] <= A[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
A[6] <= A[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
A[7] <= A[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
A[8] <= A[8]~reg0.DB_MAX_OUTPUT_PORT_TYPE
MSB_A <= alu_out[8].DB_MAX_OUTPUT_PORT_TYPE


|part3|hex_decoder:H0
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|part3|hex_decoder:H1
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|part3|hex_decoder:H2
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|part3|hex_decoder:H3
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|part3|hex_decoder:H4
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|part3|hex_decoder:H5
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


